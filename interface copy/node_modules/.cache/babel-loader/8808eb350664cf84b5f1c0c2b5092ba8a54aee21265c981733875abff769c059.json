{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport { useNavigate } from \"react-router-dom\";\nconst URL = \"http://localhost:3000/api/users\";\nconst loginUser = async (user, loginHandlerCb) => {\n  _s();\n  if (user.email === \"\") {\n    Swal.fire(\"Login\", \"Email can not be empty.\", \"error\");\n  } else if (user.password === \"\") {\n    Swal.fire(\"Login\", \"Password can not be empty.\", \"error\");\n  } else {\n    try {\n      console.log('up');\n      navigate = useNavigate();\n      let result = await axios({\n        method: 'POST',\n        url: `${URL}/login`,\n        data: user\n      });\n      Swal.fire(\"Login\", result.data.message, \"success\");\n      const access_token = result.data.access_token;\n      localStorage.setItem('access_token', access_token);\n      navigate('/');\n      loginHandlerCb(true);\n      console.log(result.data);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n};\n_s(loginUser, \"7z+bV9xHBQ1A1bt6m/1oQLk0tZA=\", false, function () {\n  return [useNavigate];\n});\nconst getAllUser = async cb => {\n  try {\n    let result = await axios({\n      method: 'GET',\n      url: URL\n    });\n    cb(result.data);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n// const loginUser = async (user, loginCbHandler) => {\n//     if (user.username === \"\") {\n//         Swal.fire(\"Login\", \"Username can not be empty.\", \"error\");\n//     } else if (user.password === \"\") {\n//         Swal.fire(\"Login\", \"Password can not be empty.\", \"error\");\n//     } else {\n//         try {\n//             let result = await axios({\n//                 method: \"POST\",\n//                 url: URL + \"/login\",\n//                 data: user,\n//             });\n//             Swal.fire(\"Login\", result.data.message, \"success\");\n//             const access_token = result.data.access_token\n//             localStorage.setItem('access_token', access_token)\n\n//             loginCbHandler(true)\n//             console.log(result.data)\n//         } catch (err) {\n//             console.log(err)\n//         }\n//     }\n// };\n\n// const registerUser = async (user, loginCbHandler) => {\n//     try {\n//         let result = await axios({\n//             method: \"POST\",\n//             url: URL + \"/register\",\n//             data: user,\n//           });\n\n//         Swal.fire(\"Register\", result.data.message, \"success\");\n//         loginCbHandler(true)\n//     } catch (e) {\n//         console.log(e);\n//     }\n// };\n\n// const deleteUser = async (user,id) => {\n//     try {\n//         let result = await axios({\n//             method: \"DELETE\",\n//             url: URL + \"/delete/\"+id,\n//             data: user,\n//           });\n\n//         Swal.fire(\"Delete User\", result.data.message, \"success\");\n//     } catch (e) {\n//         console.log(e);\n//     }\n// };\n\nexport { loginUser, getAllUser };","map":{"version":3,"names":["axios","Swal","useNavigate","URL","loginUser","user","loginHandlerCb","_s","email","fire","password","console","log","navigate","result","method","url","data","message","access_token","localStorage","setItem","err","getAllUser","cb"],"sources":["D:/Pelatihan/Code id/mini-project/full-stack/kelompok/Warehouse-Code.id/interface/src/axios/userAxios.js"],"sourcesContent":["import axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst URL = \"http://localhost:3000/api/users\"\r\n\r\nconst loginUser = async (user, loginHandlerCb) => {\r\n    if (user.email === \"\") {\r\n        Swal.fire(\"Login\", \"Email can not be empty.\", \"error\");\r\n    } else if (user.password === \"\") {\r\n        Swal.fire(\"Login\", \"Password can not be empty.\", \"error\");\r\n    } else {\r\n        try{\r\n            console.log('up')\r\n            navigate = useNavigate()\r\n            let result = await axios({\r\n                method:'POST',\r\n                url:`${URL}/login`,\r\n                data:user\r\n            })\r\n            Swal.fire(\"Login\", result.data.message, \"success\");\r\n            const access_token = result.data.access_token\r\n            localStorage.setItem('access_token', access_token)\r\n            navigate('/')\r\n            loginHandlerCb(true)\r\n            console.log(result.data)\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nconst getAllUser = async (cb) => {\r\n    try{\r\n        let result = await axios({\r\n            method:'GET',\r\n            url: URL\r\n        })\r\n        cb(result.data)\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n// const loginUser = async (user, loginCbHandler) => {\r\n//     if (user.username === \"\") {\r\n//         Swal.fire(\"Login\", \"Username can not be empty.\", \"error\");\r\n//     } else if (user.password === \"\") {\r\n//         Swal.fire(\"Login\", \"Password can not be empty.\", \"error\");\r\n//     } else {\r\n//         try {\r\n//             let result = await axios({\r\n//                 method: \"POST\",\r\n//                 url: URL + \"/login\",\r\n//                 data: user,\r\n//             });\r\n//             Swal.fire(\"Login\", result.data.message, \"success\");\r\n//             const access_token = result.data.access_token\r\n//             localStorage.setItem('access_token', access_token)\r\n\r\n//             loginCbHandler(true)\r\n//             console.log(result.data)\r\n//         } catch (err) {\r\n//             console.log(err)\r\n//         }\r\n//     }\r\n// };\r\n\r\n// const registerUser = async (user, loginCbHandler) => {\r\n//     try {\r\n//         let result = await axios({\r\n//             method: \"POST\",\r\n//             url: URL + \"/register\",\r\n//             data: user,\r\n//           });\r\n\r\n//         Swal.fire(\"Register\", result.data.message, \"success\");\r\n//         loginCbHandler(true)\r\n//     } catch (e) {\r\n//         console.log(e);\r\n//     }\r\n// };\r\n\r\n// const deleteUser = async (user,id) => {\r\n//     try {\r\n//         let result = await axios({\r\n//             method: \"DELETE\",\r\n//             url: URL + \"/delete/\"+id,\r\n//             data: user,\r\n//           });\r\n\r\n//         Swal.fire(\"Delete User\", result.data.message, \"success\");\r\n//     } catch (e) {\r\n//         console.log(e);\r\n//     }\r\n// };\r\n\r\n\r\nexport {\r\n    loginUser, getAllUser\r\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,aAAa;AAC9B,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,GAAG,GAAG,iCAAiC;AAE7C,MAAMC,SAAS,GAAG,MAAAA,CAAOC,IAAI,EAAEC,cAAc,KAAK;EAAAC,EAAA;EAC9C,IAAIF,IAAI,CAACG,KAAK,KAAK,EAAE,EAAE;IACnBP,IAAI,CAACQ,IAAI,CAAC,OAAO,EAAE,yBAAyB,EAAE,OAAO,CAAC;EAC1D,CAAC,MAAM,IAAIJ,IAAI,CAACK,QAAQ,KAAK,EAAE,EAAE;IAC7BT,IAAI,CAACQ,IAAI,CAAC,OAAO,EAAE,4BAA4B,EAAE,OAAO,CAAC;EAC7D,CAAC,MAAM;IACH,IAAG;MACCE,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;MACjBC,QAAQ,GAAGX,WAAW,EAAE;MACxB,IAAIY,MAAM,GAAG,MAAMd,KAAK,CAAC;QACrBe,MAAM,EAAC,MAAM;QACbC,GAAG,EAAE,GAAEb,GAAI,QAAO;QAClBc,IAAI,EAACZ;MACT,CAAC,CAAC;MACFJ,IAAI,CAACQ,IAAI,CAAC,OAAO,EAAEK,MAAM,CAACG,IAAI,CAACC,OAAO,EAAE,SAAS,CAAC;MAClD,MAAMC,YAAY,GAAGL,MAAM,CAACG,IAAI,CAACE,YAAY;MAC7CC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEF,YAAY,CAAC;MAClDN,QAAQ,CAAC,GAAG,CAAC;MACbP,cAAc,CAAC,IAAI,CAAC;MACpBK,OAAO,CAACC,GAAG,CAACE,MAAM,CAACG,IAAI,CAAC;IAC5B,CAAC,CACD,OAAMK,GAAG,EAAC;MACNX,OAAO,CAACC,GAAG,CAACU,GAAG,CAAC;IACpB;EACJ;AAEJ,CAAC;AAAAf,EAAA,CA1BKH,SAAS;EAAA,QAQQF,WAAW;AAAA;AAoBlC,MAAMqB,UAAU,GAAG,MAAOC,EAAE,IAAK;EAC7B,IAAG;IACC,IAAIV,MAAM,GAAG,MAAMd,KAAK,CAAC;MACrBe,MAAM,EAAC,KAAK;MACZC,GAAG,EAAEb;IACT,CAAC,CAAC;IACFqB,EAAE,CAACV,MAAM,CAACG,IAAI,CAAC;EACnB,CAAC,CACD,OAAMK,GAAG,EAAC;IACNX,OAAO,CAACC,GAAG,CAACU,GAAG,CAAC;EACpB;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA,SACIlB,SAAS,EAAEmB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}