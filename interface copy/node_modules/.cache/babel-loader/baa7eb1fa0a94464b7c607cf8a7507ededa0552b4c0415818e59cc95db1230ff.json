{"ast":null,"code":"import axios from \"axios\";\nimport Swal from \"sweetalert2\";\nconst URL = \"http://localhost:3000/api/users\";\nconst loginUser = async (formLogin, loginHandlerCb) => {\n  if (user.username === \"\") {\n    Swal.fire(\"Login\", \"Username can not be empty.\", \"error\");\n  } else if (user.password === \"\") {\n    Swal.fire(\"Login\", \"Password can not be empty.\", \"error\");\n  } else {\n    try {\n      console.log('up');\n      let result = await axios({\n        method: 'POST',\n        url: 'http://localhost:3000/api/users/login',\n        data: formLogin\n      });\n      Swal.fire(\"Login\", result.data.message, \"success\");\n      const access_token = result.data.access_token;\n      localStorage.setItem('access_token', access_token);\n      // navigate('/')\n      loginHandlerCb(true);\n      console.log(result.data);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n};\n\n// const loginUser = async (user, loginCbHandler) => {\n//     if (user.username === \"\") {\n//         Swal.fire(\"Login\", \"Username can not be empty.\", \"error\");\n//     } else if (user.password === \"\") {\n//         Swal.fire(\"Login\", \"Password can not be empty.\", \"error\");\n//     } else {\n//         try {\n//             let result = await axios({\n//                 method: \"POST\",\n//                 url: URL + \"/login\",\n//                 data: user,\n//             });\n//             Swal.fire(\"Login\", result.data.message, \"success\");\n//             const access_token = result.data.access_token\n//             localStorage.setItem('access_token', access_token)\n\n//             loginCbHandler(true)\n//             console.log(result.data)\n//         } catch (err) {\n//             console.log(err)\n//         }\n//     }\n// };\n\nconst registerUser = async (user, loginCbHandler) => {\n  try {\n    let result = await axios({\n      method: \"POST\",\n      url: URL + \"/register\",\n      data: user\n    });\n    Swal.fire(\"Register\", result.data.message, \"success\");\n    loginCbHandler(true);\n  } catch (e) {\n    console.log(e);\n  }\n};\nconst deleteUser = async (user, id) => {\n  try {\n    let result = await axios({\n      method: \"DELETE\",\n      url: URL + \"/delete/\" + id,\n      data: user\n    });\n    Swal.fire(\"Delete User\", result.data.message, \"success\");\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport { loginUser, registerUser, deleteUser };","map":{"version":3,"names":["axios","Swal","URL","loginUser","formLogin","loginHandlerCb","user","username","fire","password","console","log","result","method","url","data","message","access_token","localStorage","setItem","err","registerUser","loginCbHandler","e","deleteUser","id"],"sources":["D:/Pelatihan/Code id/mini-project/full-stack/kelompok/Warehouse-Code.id/interface/src/axios/userAxios.js"],"sourcesContent":["import axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst URL = \"http://localhost:3000/api/users\"\r\n\r\nconst loginUser = async (formLogin, loginHandlerCb) => {\r\n    if (user.username === \"\") {\r\n        Swal.fire(\"Login\", \"Username can not be empty.\", \"error\");\r\n    } else if (user.password === \"\") {\r\n        Swal.fire(\"Login\", \"Password can not be empty.\", \"error\");\r\n    } else {\r\n        try{\r\n            console.log('up')\r\n            let result = await axios({\r\n                method:'POST',\r\n                url:'http://localhost:3000/api/users/login',\r\n                data:formLogin\r\n            })\r\n            Swal.fire(\"Login\", result.data.message, \"success\");\r\n            const access_token = result.data.access_token\r\n            localStorage.setItem('access_token', access_token)\r\n            // navigate('/')\r\n            loginHandlerCb(true)\r\n            console.log(result.data)\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n// const loginUser = async (user, loginCbHandler) => {\r\n//     if (user.username === \"\") {\r\n//         Swal.fire(\"Login\", \"Username can not be empty.\", \"error\");\r\n//     } else if (user.password === \"\") {\r\n//         Swal.fire(\"Login\", \"Password can not be empty.\", \"error\");\r\n//     } else {\r\n//         try {\r\n//             let result = await axios({\r\n//                 method: \"POST\",\r\n//                 url: URL + \"/login\",\r\n//                 data: user,\r\n//             });\r\n//             Swal.fire(\"Login\", result.data.message, \"success\");\r\n//             const access_token = result.data.access_token\r\n//             localStorage.setItem('access_token', access_token)\r\n\r\n//             loginCbHandler(true)\r\n//             console.log(result.data)\r\n//         } catch (err) {\r\n//             console.log(err)\r\n//         }\r\n//     }\r\n// };\r\n\r\nconst registerUser = async (user, loginCbHandler) => {\r\n    try {\r\n        let result = await axios({\r\n            method: \"POST\",\r\n            url: URL + \"/register\",\r\n            data: user,\r\n          });\r\n\r\n        Swal.fire(\"Register\", result.data.message, \"success\");\r\n        loginCbHandler(true)\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\n\r\nconst deleteUser = async (user,id) => {\r\n    try {\r\n        let result = await axios({\r\n            method: \"DELETE\",\r\n            url: URL + \"/delete/\"+id,\r\n            data: user,\r\n          });\r\n\r\n        Swal.fire(\"Delete User\", result.data.message, \"success\");\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\n\r\n\r\nexport {\r\n    loginUser, registerUser, deleteUser\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,aAAa;AAE9B,MAAMC,GAAG,GAAG,iCAAiC;AAE7C,MAAMC,SAAS,GAAG,MAAAA,CAAOC,SAAS,EAAEC,cAAc,KAAK;EACnD,IAAIC,IAAI,CAACC,QAAQ,KAAK,EAAE,EAAE;IACtBN,IAAI,CAACO,IAAI,CAAC,OAAO,EAAE,4BAA4B,EAAE,OAAO,CAAC;EAC7D,CAAC,MAAM,IAAIF,IAAI,CAACG,QAAQ,KAAK,EAAE,EAAE;IAC7BR,IAAI,CAACO,IAAI,CAAC,OAAO,EAAE,4BAA4B,EAAE,OAAO,CAAC;EAC7D,CAAC,MAAM;IACH,IAAG;MACCE,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;MACjB,IAAIC,MAAM,GAAG,MAAMZ,KAAK,CAAC;QACrBa,MAAM,EAAC,MAAM;QACbC,GAAG,EAAC,uCAAuC;QAC3CC,IAAI,EAACX;MACT,CAAC,CAAC;MACFH,IAAI,CAACO,IAAI,CAAC,OAAO,EAAEI,MAAM,CAACG,IAAI,CAACC,OAAO,EAAE,SAAS,CAAC;MAClD,MAAMC,YAAY,GAAGL,MAAM,CAACG,IAAI,CAACE,YAAY;MAC7CC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEF,YAAY,CAAC;MAClD;MACAZ,cAAc,CAAC,IAAI,CAAC;MACpBK,OAAO,CAACC,GAAG,CAACC,MAAM,CAACG,IAAI,CAAC;IAC5B,CAAC,CACD,OAAMK,GAAG,EAAC;MACNV,OAAO,CAACC,GAAG,CAACS,GAAG,CAAC;IACpB;EACJ;AAEJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG,MAAAA,CAAOf,IAAI,EAAEgB,cAAc,KAAK;EACjD,IAAI;IACA,IAAIV,MAAM,GAAG,MAAMZ,KAAK,CAAC;MACrBa,MAAM,EAAE,MAAM;MACdC,GAAG,EAAEZ,GAAG,GAAG,WAAW;MACtBa,IAAI,EAAET;IACR,CAAC,CAAC;IAEJL,IAAI,CAACO,IAAI,CAAC,UAAU,EAAEI,MAAM,CAACG,IAAI,CAACC,OAAO,EAAE,SAAS,CAAC;IACrDM,cAAc,CAAC,IAAI,CAAC;EACxB,CAAC,CAAC,OAAOC,CAAC,EAAE;IACRb,OAAO,CAACC,GAAG,CAACY,CAAC,CAAC;EAClB;AACJ,CAAC;AAED,MAAMC,UAAU,GAAG,MAAAA,CAAOlB,IAAI,EAACmB,EAAE,KAAK;EAClC,IAAI;IACA,IAAIb,MAAM,GAAG,MAAMZ,KAAK,CAAC;MACrBa,MAAM,EAAE,QAAQ;MAChBC,GAAG,EAAEZ,GAAG,GAAG,UAAU,GAACuB,EAAE;MACxBV,IAAI,EAAET;IACR,CAAC,CAAC;IAEJL,IAAI,CAACO,IAAI,CAAC,aAAa,EAAEI,MAAM,CAACG,IAAI,CAACC,OAAO,EAAE,SAAS,CAAC;EAC5D,CAAC,CAAC,OAAOO,CAAC,EAAE;IACRb,OAAO,CAACC,GAAG,CAACY,CAAC,CAAC;EAClB;AACJ,CAAC;AAGD,SACIpB,SAAS,EAAEkB,YAAY,EAAEG,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}